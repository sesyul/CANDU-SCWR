*--------------------
* Name          : SCWR64N1Flu.x2m
* Purpose       : Flux calculation, 
*                 Double Discr. (DD), no EVO: at reloading (NoTh) : DDNoTh
* Author        : U. Le Tennier 
* Date          : 08/04/2020
* Modifications : /
*
*---------------------------
*-------------------------------------------------------------------------
* Declare data structures
*-------------------------------------------------------------------------
PROCEDURE SCWR64N1Crit                             ;
MODULE GREP: DELETE: END: UTL: SIM: FLPOW: MSTR:   ;
LINKED_LIST GeoCoeur Matex Track MacroRfl          ;
LINKED_LIST FuelMap System Flux                    ;
LINKED_LIST DbRef_03  DbRef_34  DbRef_45           ;
LINKED_LIST DbRef_03c DbRef_34c DbRef_45c          ;
LINKED_LIST DbRef_03s DbRef_34s DbRef_45s          ;
LINKED_LIST History PowerCore                      ;

* IN 
SEQ_ASCII   DBRE033.inp DBRE343.inp DBRE453.inp       ;
SEQ_ASCII   DBRE034.inp DBRE344.inp DBRE454.inp       ;
SEQ_ASCII   DBRE03c3.inp DBRE34c3.inp DBRE45c3.inp    ;
SEQ_ASCII   DBRE03c4.inp DBRE34c4.inp DBRE45c4.inp    ;
SEQ_ASCII   DBRE03s3.inp DBRE34s3.inp DBRE45s3.inp    ;
SEQ_ASCII   DBRE03s4.inp DBRE34s4.inp DBRE45s4.inp    ;
SEQ_ASCII   MACRORFL.inp                              ;
SEQ_ASCII   GEOCORE.inp FMAP.inp MATEX.inp TRACK.inp  ;
SEQ_ASCII   HISTORY.inp                               ;

* OUT
SEQ_ASCII   fuelmap   :: FILE 'FMAP.out'        ; 
SEQ_ASCII   history   :: FILE 'HISTORY.out'     ;

*-------------------------------------------------------------------------
* Copy of the coupling data files into local files
*-------------------------------------------------------------------------
* Frozen files ! Multicompo are copied after LoadModel definition
MacroRfl := MACRORFL.inp      ;  ! Reflector macro lib (contains both refl1 and refl2)
GeoCoeur := GEOCORE.inp       ;  ! Core geometry 
Matex    := MATEX.inp         ;  ! Matex 
Track    := TRACK.inp         ;  ! Tracking 

* Updated files
FuelMap  := FMAP.inp          ;  ! FuelMap
History  := HISTORY.inp       ;  ! Bore, keff, time and cycle history 

*-------------------------------------------------------------------------
* Declare indexes and variables to retrieve from History 
*-------------------------------------------------------------------------
* DONT CHANGE THE FOLLOWING LINES 
* Interface write here please                
INTEGER Step      := HERE1     ; ! Cumulated calculation step, init. at 1   
INTEGER CycleRef  := HERE2     ; ! Number of cycle to calculate 

STRING TimeModel  := HERE3     ; ! "REP1" or "REP1b" "REP2" "CANDU1" "CANDU2" "CANDU5"  
STRING LoadModel  := HERE4     ; ! "3cycles" ('3c') or "4cycles" ('4c') 

* Interface don t write anymore please   
* YOU CAN CHANGE THE LINES BELOW  
INTEGER StepCorr := Step 1 -  ; ! StepCorr = Step - 1, used to tabulate in History 

* Variables retrieved from History 
REAL    Time                ; ! Current cycle time, reset to 0. after reloading 
REAL    Delt                ; ! Last time step used to burn fuel
INTEGER CycleIndex          ; ! Current cycle
INTEGER StepCycle           ; ! Calculation step of the cycle, reset at 1 after reloading  

* Binary to read by interface at the end of execution, 1 is yes 0 is no 
INTEGER Reload              ; ! Reloading binary, if = 1, triggers reloading loop
INTEGER Out                 ; ! End of execution binary, if = 1, triggers end of execution

IF Step 1 > THEN  
  MSTR: History ::
    GET 1 <<Step>> "Step"        >>Step<<
    GET 1 <<Step>> "StepCy"      >>StepCycle<<   
    GET 1 <<Step>> "CycleID"     >>CycleIndex<<
    GET 1 <<Step>> "Reload"      >>Reload<<  
    GET 1 <<Step>> "Out"         >>Out<<
    GET 1 <<Step>> "Time"        >>Time<<      
    GET 1 <<StepCorr>> "Delt"    >>Delt<<      ;

    IF Reload 1 = THEN 
      EVALUATE Reload := 0 ;
    ENDIF   ;

    IF Out    1 = THEN 
      EVALUATE Out    := 0 ;
    ENDIF   ;
    
ELSE ! Step = 1, init. 
  EVALUATE Time       := 0. ;
  EVALUATE CycleIndex := 1  ;
  EVALUATE StepCycle  := 1  ;
  EVALUATE Reload     := 0  ;
  EVALUATE Out        := 0  ;
  History MSTR: History :: 
    PUT 1 <<Step>> "Step"        <<Step>>
    PUT 1 <<Step>> "StepCy"      <<StepCycle>>   
    PUT 1 <<Step>> "CycleID"     <<CycleIndex>>
    PUT 1 <<Step>> "Reload"      <<Reload>>  
    PUT 1 <<Step>> "Out"         <<Out>>
    PUT 1 <<Step>> "Time"        <<Time>>      ;
ENDIF ;

*-------------------------------------------------------------------------
* Declare indexes and variables to retrieve from History + Multicompo retrieving
*-------------------------------------------------------------------------

REAL       Keff KeffI ppmB         ;
REAL       TimeEnd                 ; 

REAL       DensCU1  :=   0.2624    ;    
REAL       DensCD1  :=   0.584373  ;
REAL       TempF1   :=   1056.26   ;
REAL       TempCU1  :=   671.10    ;
REAL       TempCD1  :=   634.62625 ;

REAL       DensCU2  :=   0.09515   ; 
REAL       DensCD2  :=   0.600204  ;
REAL       TempF2   :=   1319.40   ;
REAL       TempCU2  :=   772.14    ;
REAL       TempCD2  :=   630.3776  ; 

REAL       DensCU3  :=   0.073707 ; 
REAL       DensCD3  :=   0.612943 ;
REAL       TempF3   :=   1429.44  ;
REAL       TempCU3  :=   858.85   ;
REAL       TempCD3  :=   626.9835 ;

IF LoadModel "3c" = THEN 
  EVALUATE     TimeEnd  :=  405.    ; ! Days 

  DbRef_03  := DBRE033.inp       ;  ! Multicompo 03
  DbRef_34  := DBRE343.inp       ;  ! Multicompo 34
  DbRef_45  := DBRE453.inp       ;  ! Multicompo 45

  DbRef_03c := DBRE03c3.inp      ;  ! Multicompo 03c
  DbRef_34c := DBRE34c3.inp      ;  ! Multicompo 34c
  DbRef_45c := DBRE45c3.inp      ;  ! Multicompo 45c

  DbRef_03s := DBRE03s3.inp      ;  ! Multicompo 03s
  DbRef_34s := DBRE34s3.inp      ;  ! Multicompo 34s
  DbRef_45s := DBRE45s3.inp      ;  ! Multicompo 45s

ELSEIF LoadModel "4c" = THEN
  EVALUATE     TimeEnd  :=  325.    ; ! Days 

  DbRef_03  := DBRE034.inp       ;  ! Multicompo 03
  DbRef_34  := DBRE344.inp       ;  ! Multicompo 34
  DbRef_45  := DBRE454.inp       ;  ! Multicompo 45

  DbRef_03c := DBRE03c4.inp      ;  ! Multicompo 03c
  DbRef_34c := DBRE34c4.inp      ;  ! Multicompo 34c
  DbRef_45c := DBRE45c4.inp      ;  ! Multicompo 45c

  DbRef_03s := DBRE03s4.inp      ;  ! Multicompo 03s
  DbRef_34s := DBRE34s4.inp      ;  ! Multicompo 34s
  DbRef_45s := DBRE45s4.inp      ;  ! Multicompo 45s
ENDIF                                         ;  

REAL       PowCore   := 2032.0     ; !MW
STRING     NameCycl  := "Cycle" CycleIndex I_TO_S +  ; 
                                    
*---------------------
* Adjust boron to reach criticality 
* Normalize flux thanks to total core power
*---------------------

FuelMap Matex Flux := SCWR64N1Crit FuelMap Matex Track
                MacroRfl 
                DbRef_03  DbRef_34  DbRef_45
                DbRef_03c DbRef_34c DbRef_45c
                DbRef_03s DbRef_34s DbRef_45s :: 
                <<Step>> 
                <<DensCU1>>  <<DensCU2>>  <<DensCU3>> 
                <<DensCD1>>  <<DensCD2>>  <<DensCD3>> 
                <<TempF1>>   <<TempF2>>   <<TempF3>> 
                <<TempCU1>>  <<TempCU2>>  <<TempCU3>> 
                <<TempCD1>>  <<TempCD2>>  <<TempCD3>>                         
                >>ppmB<< >>Keff<< >>KeffI<<            ; 
  
  PowerCore := FLPOW: FuelMap Flux Track Matex :: 
  EDIT 0 PTOT <<PowCore>>                           ; 

*---------------------
* Burning fuel with regard to TimeModel 
*--------------------- 

  IF TimeModel "REP1" = THEN 

    *----
    *  REP1 (time steps in days)
    *  of 5    days from  0    to  5   days
    *  of 10   days from  5    to  105 days
    */ of 100  days from  100  to  405 days
    ** of 100  days from  100  to  305 days 
    ** of 20   days from  305  to  325 days  
    *----

    IF Time 0. = THEN 
      EVALUATE Delt := 5.   ;
    ELSEIF Time 5.  = THEN 
      EVALUATE Delt := 10.  ;
    ELSEIF Time 105. = THEN 
      EVALUATE Delt := 100. ;
    ELSEIF Time 305. = THEN 
      IF LoadModel "4c'" = THEN
      EVALUATE Delt := 20.  ;
      ENDIF                 ; 
    ENDIF                   ;  

  ELSEIF TimeModel "REP1b" = THEN 

    *----
    *  REP1b (time steps in days)
    *  of 5    days from  0    to  5   days
    *  of 25   days from  5    to  105 days
    */ of 100  days from  100  to  405 days 
    ** of 100  days from  100  to  305 days 
    ** of 20   days from  305  to  325 days 
    *----

    IF Time 0. = THEN 
      EVALUATE Delt := 5.   ;
    ELSEIF Time 5.  = THEN 
      EVALUATE Delt := 25.  ;
    ELSEIF Time 105. = THEN 
      EVALUATE Delt := 100. ;
    ELSEIF Time 305. = THEN 
      IF LoadModel "4c" = THEN
      EVALUATE Delt := 20.  ;
      ENDIF                 ; 
    ENDIF                   ;

  ELSEIF TimeModel "REP2" = THEN 

    *----
    *  REP2 (time steps in days)
    *  of 2    days from  0    to  10  days
    *  of 10   days from  10   to  20  days
    *  of 35   days from  20   to  55  days 
    *  of 50   days from  55   to  105 days 
    */ of 100  days from  105  to  405 days 
    ** of 100  days from  105  to  305 days 
    ** of 20   days from  305  to  325 days  
    *----

    IF Time 0. = THEN 
      EVALUATE Delt := 2.   ;
    ELSEIF Time 10. = THEN 
      EVALUATE Delt := 10.  ;
    ELSEIF Time 20. = THEN 
      EVALUATE Delt := 35.  ;
    ELSEIF Time 55. = THEN 
      EVALUATE Delt := 50.  ;
    ELSEIF Time 105. = THEN 
      EVALUATE Delt := 100. ;
    ELSEIF Time 305. = THEN 
      IF LoadModel "4c" = THEN
      EVALUATE Delt := 20.  ;
      ENDIF                 ; 
    ENDIF                   ;

  ELSEIF TimeModel "CANDU1" = THEN 
    EVALUATE Delt := 1.     ;

  ELSEIF TimeModel "CANDU2" = THEN
    IF Time 404. = THEN  
      EVALUATE Delt := 1.   ;
    ELSEIF Time 324. = THEN 
      IF TimeModel "4c" = THEN
        EVALUATE Delt := 1. ;
      ENDIF                 ;
    ELSE   
      EVALUATE Delt := 2.   ;
    ENDIF                   ;

  ELSEIF TimeModel "CANDU3" = THEN
      EVALUATE Delt := 5.   ;

  ELSEIF TimeModel "CANDU5" = THEN
    IF Time 0. = THEN 
      EVALUATE Delt := 5.   ;
    ELSEIF Time 5. = THEN 
      EVALUATE Delt := 20.  ;
    ENDIF                   ;

  ENDIF                                      ;
  
*---------------------
* Manage the cycle s last day flux calculation
* -> Do not burn of Delt.
* -> Trigger the reloading
*---------------------

  IF Time TimeEnd < THEN 

    FuelMap := SIM: FuelMap PowerCore ::
    EDIT 0 
    CYCLE <<NameCycl>>
    TIME <<Delt>> DAY
    ENDCYCLE                                   ;
  
  ELSE 

    FuelMap := SIM: FuelMap PowerCore ::
    EDIT 0 
    CYCLE <<NameCycl>>
    TIME 0. DAY
    ENDCYCLE                                   ;
    
    EVALUATE Reload := 1                       ;

  ENDIF                                        ;

*---------------------
* Updates of Step, StepCycle, StepCorr and Time
*---------------------

EVALUATE Step      := Step 1 +      ;
EVALUATE StepCycle := StepCycle 1 + ;
EVALUATE StepCorr  := Step 1 -      ; 

IF Reload 0 = THEN
  EVALUATE Time      := Time Delt +  ;
ELSE 
  EVALUATE Time      := 0.           ;
ENDIF                                ;


*---------------------
* If reloading is triggered, CycleIndex is updated and StepCycle is reset 
* Test to know if the simulation is finished or not 
*---------------------

IF Reload 1 = THEN

  EVALUATE CycleIndex := CycleIndex 1 + ;
  EVALUATE StepCycle  := 1              ;

  IF CycleIndex CycleRef > THEN
    EVALUATE Out := 1                ;
  ENDIF ;
ENDIF ;


*---------------------
* Fill History
*---------------------

History := MSTR: History :: 
PUT 1 <<StepCorr>> "ppmB"        <<ppmB>>
PUT 1 <<StepCorr>> "K-EFFECTIVE" <<Keff>> 
PUT 1 <<StepCorr>> "K-EFFINIT  " <<KeffI>> 

PUT 1 <<StepCorr>> "Delt"        <<Delt>>  

PUT 1 <<Step>> "Step"        <<Step>>
PUT 1 <<Step>> "StepCy"      <<StepCycle>>   
PUT 1 <<Step>> "CycleID"     <<CycleIndex>>
PUT 1 <<Step>> "Reload"      <<Reload>>  
PUT 1 <<Step>> "Out"         <<Out>>
PUT 1 <<Step>> "Time"        <<Time>>      ;

*---------------------
* Clean up 
*---------------------

  Flux PowerCore := DELETE: Flux PowerCore ; 

*-------------------------------------------------------------------------
* Copy of the local files into output coupling structures
*-------------------------------------------------------------------------

fuelmap  := FuelMap  ;
history  := History  ;

END: ; 
QUIT "LIST" .